// Copyright 2022 Laboratory for Underwater Systems and Technologies (LABUST)
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

using UnityEngine;

namespace Labust.Sensors.AIS
{
    /// <summary>
    /// This class implements Class A type AIS position report message.
    /// This covers message types 1, 2 and 3.
    /// For more reference see <see cref="!:https://www.navcen.uscg.gov/?pageName=AISMessagesA">here.</see>
    /// </summary>
    public class PositionReportClassA : AisMessage
    {
        /// <summary>
        /// Speed over ground in 1/10 knot steps.
        /// Example: if SOG is 40, speed is 4 knots.
        /// </summary>
        public uint SOG { get; set; }

        /// <summary>
        /// Course over ground, 0-3599
        /// </summary>
        public uint COG { get; set; }

        /// <summary>
        /// Positional accuracy: low or high.
        /// </summary>
        public PositionAccuracy PositionAccuracy { get; set; }

        /// <summary>
        /// Longitude in in 1/10000 min.
        /// East positive, west negative.
        /// 2644228 -> 264.4228’ -> 4° 24.4228’
        /// </summary>
        public double Longitude { get; set; }

        /// <summary>
        /// Latitude in in 1/10000 min.
        /// North positive, south negative.
        /// 30737782 -> 3073.7782’ -> 51° 13.7782’
        /// </summary>
        public double Latitude { get; set; }

        /// <summary>
        /// Heading (orientation) of vessel in degrees (0-359) 
        /// 511 indicates not available
        /// </summary>
        public uint TrueHeading { get; set; }

        /// <summary>
        /// UTC second when the report was generated by the electronic position system (EPFS) (0-59) or
        /// 60 if timestamp is not available, 61 if positioning system is in manual input mode,
        /// 62 if electronic position fixing system operates in estimated (dead reckoning) mode
        /// 63 if the positioning system is inoperative.
        /// </summary>
        public uint TimeStamp { get; set; }

        /// <summary>
        /// Receiver autonomous integrity monitoring (RAIM) flag of electronic position fixing device
        /// </summary>
        public Raim Raim { get; set; }
        public ManeuverIndicator ManeuverIndicator { get; set; }

        public PositionReportClassA()
        {
            this.MessageType = AISMessageType.PositionReportClassA;
            this.PositionAccuracy = PositionAccuracy.Low;
            this.Raim = Raim.NotInUse;
            this.ManeuverIndicator = ManeuverIndicator.NotAvailable;
        }

        public PositionReportClassA(int MMSI)
        {
            this.MMSI = MMSI;
            this.PositionAccuracy = PositionAccuracy.Low;
            this.Raim = Raim.NotInUse;
            this.ManeuverIndicator = ManeuverIndicator.NotAvailable;
        }

        public override string ToString()
        {
            //TODO debug purposes
            return string.Format("MMSI: {0}, Type: {1}, TrueHeading: {2}, COG: {3}, SOG: {4}, Timestamp: {5}", 
                this.MMSI, this.MessageType, this.TrueHeading, this.COG, this.SOG, this.TimeStamp);
        }
    }
}
