// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: sensor_streaming.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Sensorstreaming {

  /// <summary>Holder for reflection information generated from sensor_streaming.proto</summary>
  public static partial class SensorStreamingReflection {

    #region Descriptor
    /// <summary>File descriptor for sensor_streaming.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SensorStreamingReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChZzZW5zb3Jfc3RyZWFtaW5nLnByb3RvEg9zZW5zb3JzdHJlYW1pbmcaDGNv",
            "bW1vbi5wcm90byJqChZDYW1lcmFTdHJlYW1pbmdSZXF1ZXN0EgwKBGRhdGEY",
            "ASABKAwSEQoJdGltZVN0YW1wGAIgASgBEg0KBXdpZHRoGAMgASgNEg4KBmhl",
            "aWdodBgEIAEoDRIQCghzZW5zb3JJZBgFIAEoCSIkChFTdHJlYW1pbmdSZXNw",
            "b25zZRIPCgdzdWNjZXNzGAEgASgIIsgBCgpQb2ludEZpZWxkEgwKBElOVDgY",
            "ASABKA0SDQoFVUlOVDgYAiABKA0SDQoFSU5UMTYYAyABKA0SDgoGVUlOVDE2",
            "GAQgASgNEg0KBUlOVDMyGAUgASgNEg4KBlVJTlQzMhgGIAEoDRIPCgdGTE9B",
            "VDMyGAcgASgNEg8KB0ZMT0FUNjQYCCABKA0SDAoEbmFtZRgJIAEoCRIOCgZv",
            "ZmZzZXQYCiABKA0SEAoIZGF0YXR5cGUYCyABKA0SDQoFY291bnQYDCABKA0i",
            "1QEKFUxpZGFyU3RyZWFtaW5nUmVxdWVzdBIVCg10aW1lSW5TZWNvbmRzGAEg",
            "ASgBEg4KBmhlaWdodBgCIAEoDRINCgV3aWR0aBgDIAEoDRIrCgZmaWVsZHMY",
            "BCADKAsyGy5zZW5zb3JzdHJlYW1pbmcuUG9pbnRGaWVsZBITCgtpc0JpZ0Vu",
            "ZGlhbhgFIAEoCBISCgpwb2ludF9zdGVwGAYgASgNEhAKCHJvd19zdGVwGAcg",
            "ASgNEgwKBGRhdGEYCCABKAwSEAoIaXNfZGVuc2UYCSABKAgi0wEKFVJhZGFy",
            "U3RyZWFtaW5nUmVxdWVzdBIWCg5yYW5nZUluY3JlbWVudBgBIAEoAhISCgpy",
            "YW5nZVN0YXJ0GAIgASgCEhIKCm51bVNhbXBsZXMYAyABKA0SEQoJbnVtU3Bv",
            "a2VzGAQgASgNEhQKDG1pbkludGVuc2l0eRgFIAEoDRIUCgxtYXhJbnRlbnNp",
            "dHkYBiABKA0SFQoNdGltZUluU2Vjb25kcxgHIAMoARIPCgdhemltdXRoGAgg",
            "AygCEhMKC3JhZGFyU3Bva2VzGAkgASgMIjgKFURlcHRoU3RyZWFtaW5nUmVx",
            "dWVzdBINCgVkZXB0aBgBIAEoAhIQCghzZW5zb3JJZBgCIAEoCSJzChNEdmxT",
            "dHJlYW1pbmdSZXF1ZXN0EhAKCGFsdGl0dWRlGAEgASgCEiQKDmdyb3VuZFZl",
            "bG9jaXR5GAIgASgLMgwuY29tbW9uLlZlYzMSEgoKYmVhbVJhbmdlcxgDIAMo",
            "AhIQCghzZW5zb3JJZBgEIAEoCSJJChRHbnNzU3RyZWFtaW5nUmVxdWVzdBIf",
            "CgVwb2ludBgBIAEoCzIQLmNvbW1vbi5HZW9Qb2ludBIQCghzZW5zb3JJZBgC",
            "IAEoCSKvAQoTSW11U3RyZWFtaW5nUmVxdWVzdBIqCgxhY2NlbGVyYXRpb24Y",
            "ASABKAsyFC5jb21tb24uQWNjZWxlcmF0aW9uEjAKD2FuZ3VsYXJWZWxvY2l0",
            "eRgCIAEoCzIXLmNvbW1vbi5Bbmd1bGFyVmVsb2NpdHkSKAoLb3JpZW50YXRp",
            "b24YAyABKAsyEy5jb21tb24uT3JpZW50YXRpb24SEAoIc2Vuc29ySWQYBCAB",
            "KAkiRAoUUG9zZVN0cmVhbWluZ1JlcXVlc3QSGgoEcG9zZRgBIAEoCzIMLmNv",
            "bW1vbi5Qb3NlEhAKCHNlbnNvcklkGAIgASgJIkkKFVNvbmFyU3RyZWFtaW5n",
            "UmVxdWVzdBINCgVyYW5nZRgBIAEoAhIPCgdiZWFyaW5nGAIgASgCEhAKCHNl",
            "bnNvcklkGAMgASgJMpQHCg9TZW5zb3JTdHJlYW1pbmcSZQoSU3RyZWFtQ2Ft",
            "ZXJhU2Vuc29yEicuc2Vuc29yc3RyZWFtaW5nLkNhbWVyYVN0cmVhbWluZ1Jl",
            "cXVlc3QaIi5zZW5zb3JzdHJlYW1pbmcuU3RyZWFtaW5nUmVzcG9uc2UiACgB",
            "EmMKEVN0cmVhbUxpZGFyU2Vuc29yEiYuc2Vuc29yc3RyZWFtaW5nLkxpZGFy",
            "U3RyZWFtaW5nUmVxdWVzdBoiLnNlbnNvcnN0cmVhbWluZy5TdHJlYW1pbmdS",
            "ZXNwb25zZSIAKAESYwoRU3RyZWFtUmFkYXJTZW5zb3ISJi5zZW5zb3JzdHJl",
            "YW1pbmcuUmFkYXJTdHJlYW1pbmdSZXF1ZXN0GiIuc2Vuc29yc3RyZWFtaW5n",
            "LlN0cmVhbWluZ1Jlc3BvbnNlIgAoARJjChFTdHJlYW1EZXB0aFNlbnNvchIm",
            "LnNlbnNvcnN0cmVhbWluZy5EZXB0aFN0cmVhbWluZ1JlcXVlc3QaIi5zZW5z",
            "b3JzdHJlYW1pbmcuU3RyZWFtaW5nUmVzcG9uc2UiACgBEl8KD1N0cmVhbUR2",
            "bFNlbnNvchIkLnNlbnNvcnN0cmVhbWluZy5EdmxTdHJlYW1pbmdSZXF1ZXN0",
            "GiIuc2Vuc29yc3RyZWFtaW5nLlN0cmVhbWluZ1Jlc3BvbnNlIgAoARJhChBT",
            "dHJlYW1HbnNzU2Vuc29yEiUuc2Vuc29yc3RyZWFtaW5nLkduc3NTdHJlYW1p",
            "bmdSZXF1ZXN0GiIuc2Vuc29yc3RyZWFtaW5nLlN0cmVhbWluZ1Jlc3BvbnNl",
            "IgAoARJfCg9TdHJlYW1JbXVTZW5zb3ISJC5zZW5zb3JzdHJlYW1pbmcuSW11",
            "U3RyZWFtaW5nUmVxdWVzdBoiLnNlbnNvcnN0cmVhbWluZy5TdHJlYW1pbmdS",
            "ZXNwb25zZSIAKAESYQoQU3RyZWFtUG9zZVNlbnNvchIlLnNlbnNvcnN0cmVh",
            "bWluZy5Qb3NlU3RyZWFtaW5nUmVxdWVzdBoiLnNlbnNvcnN0cmVhbWluZy5T",
            "dHJlYW1pbmdSZXNwb25zZSIAKAESYwoRU3RyZWFtU29uYXJTZW5zb3ISJi5z",
            "ZW5zb3JzdHJlYW1pbmcuU29uYXJTdHJlYW1pbmdSZXF1ZXN0GiIuc2Vuc29y",
            "c3RyZWFtaW5nLlN0cmVhbWluZ1Jlc3BvbnNlIgAoAUI7CiBpby5ncnBjLmV4",
            "YW1wbGVzLnNlbnNvcnN0cmVhbWluZ0IPU2Vuc29yU3RyZWFtaW5nUAGiAgNI",
            "TFdiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Common.CommonReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Sensorstreaming.CameraStreamingRequest), global::Sensorstreaming.CameraStreamingRequest.Parser, new[]{ "Data", "TimeStamp", "Width", "Height", "SensorId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sensorstreaming.StreamingResponse), global::Sensorstreaming.StreamingResponse.Parser, new[]{ "Success" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sensorstreaming.PointField), global::Sensorstreaming.PointField.Parser, new[]{ "INT8", "UINT8", "INT16", "UINT16", "INT32", "UINT32", "FLOAT32", "FLOAT64", "Name", "Offset", "Datatype", "Count" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sensorstreaming.LidarStreamingRequest), global::Sensorstreaming.LidarStreamingRequest.Parser, new[]{ "TimeInSeconds", "Height", "Width", "Fields", "IsBigEndian", "PointStep", "RowStep", "Data", "IsDense" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sensorstreaming.RadarStreamingRequest), global::Sensorstreaming.RadarStreamingRequest.Parser, new[]{ "RangeIncrement", "RangeStart", "NumSamples", "NumSpokes", "MinIntensity", "MaxIntensity", "TimeInSeconds", "Azimuth", "RadarSpokes" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sensorstreaming.DepthStreamingRequest), global::Sensorstreaming.DepthStreamingRequest.Parser, new[]{ "Depth", "SensorId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sensorstreaming.DvlStreamingRequest), global::Sensorstreaming.DvlStreamingRequest.Parser, new[]{ "Altitude", "GroundVelocity", "BeamRanges", "SensorId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sensorstreaming.GnssStreamingRequest), global::Sensorstreaming.GnssStreamingRequest.Parser, new[]{ "Point", "SensorId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sensorstreaming.ImuStreamingRequest), global::Sensorstreaming.ImuStreamingRequest.Parser, new[]{ "Acceleration", "AngularVelocity", "Orientation", "SensorId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sensorstreaming.PoseStreamingRequest), global::Sensorstreaming.PoseStreamingRequest.Parser, new[]{ "Pose", "SensorId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sensorstreaming.SonarStreamingRequest), global::Sensorstreaming.SonarStreamingRequest.Parser, new[]{ "Range", "Bearing", "SensorId" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class CameraStreamingRequest : pb::IMessage<CameraStreamingRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CameraStreamingRequest> _parser = new pb::MessageParser<CameraStreamingRequest>(() => new CameraStreamingRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CameraStreamingRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sensorstreaming.SensorStreamingReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CameraStreamingRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CameraStreamingRequest(CameraStreamingRequest other) : this() {
      data_ = other.data_;
      timeStamp_ = other.timeStamp_;
      width_ = other.width_;
      height_ = other.height_;
      sensorId_ = other.sensorId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CameraStreamingRequest Clone() {
      return new CameraStreamingRequest(this);
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 1;
    private pb::ByteString data_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "timeStamp" field.</summary>
    public const int TimeStampFieldNumber = 2;
    private double timeStamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double TimeStamp {
      get { return timeStamp_; }
      set {
        timeStamp_ = value;
      }
    }

    /// <summary>Field number for the "width" field.</summary>
    public const int WidthFieldNumber = 3;
    private uint width_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 4;
    private uint height_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    /// <summary>Field number for the "sensorId" field.</summary>
    public const int SensorIdFieldNumber = 5;
    private string sensorId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SensorId {
      get { return sensorId_; }
      set {
        sensorId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CameraStreamingRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CameraStreamingRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Data != other.Data) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TimeStamp, other.TimeStamp)) return false;
      if (Width != other.Width) return false;
      if (Height != other.Height) return false;
      if (SensorId != other.SensorId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (TimeStamp != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TimeStamp);
      if (Width != 0) hash ^= Width.GetHashCode();
      if (Height != 0) hash ^= Height.GetHashCode();
      if (SensorId.Length != 0) hash ^= SensorId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Data.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Data);
      }
      if (TimeStamp != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(TimeStamp);
      }
      if (Width != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Width);
      }
      if (Height != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Height);
      }
      if (SensorId.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(SensorId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Data.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Data);
      }
      if (TimeStamp != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(TimeStamp);
      }
      if (Width != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Width);
      }
      if (Height != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Height);
      }
      if (SensorId.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(SensorId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      if (TimeStamp != 0D) {
        size += 1 + 8;
      }
      if (Width != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Width);
      }
      if (Height != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Height);
      }
      if (SensorId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SensorId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CameraStreamingRequest other) {
      if (other == null) {
        return;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      if (other.TimeStamp != 0D) {
        TimeStamp = other.TimeStamp;
      }
      if (other.Width != 0) {
        Width = other.Width;
      }
      if (other.Height != 0) {
        Height = other.Height;
      }
      if (other.SensorId.Length != 0) {
        SensorId = other.SensorId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Data = input.ReadBytes();
            break;
          }
          case 17: {
            TimeStamp = input.ReadDouble();
            break;
          }
          case 24: {
            Width = input.ReadUInt32();
            break;
          }
          case 32: {
            Height = input.ReadUInt32();
            break;
          }
          case 42: {
            SensorId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Data = input.ReadBytes();
            break;
          }
          case 17: {
            TimeStamp = input.ReadDouble();
            break;
          }
          case 24: {
            Width = input.ReadUInt32();
            break;
          }
          case 32: {
            Height = input.ReadUInt32();
            break;
          }
          case 42: {
            SensorId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class StreamingResponse : pb::IMessage<StreamingResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<StreamingResponse> _parser = new pb::MessageParser<StreamingResponse>(() => new StreamingResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StreamingResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sensorstreaming.SensorStreamingReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamingResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamingResponse(StreamingResponse other) : this() {
      success_ = other.success_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamingResponse Clone() {
      return new StreamingResponse(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StreamingResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StreamingResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Success != false) hash ^= Success.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StreamingResponse other) {
      if (other == null) {
        return;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class PointField : pb::IMessage<PointField>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PointField> _parser = new pb::MessageParser<PointField>(() => new PointField());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PointField> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sensorstreaming.SensorStreamingReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PointField() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PointField(PointField other) : this() {
      iNT8_ = other.iNT8_;
      uINT8_ = other.uINT8_;
      iNT16_ = other.iNT16_;
      uINT16_ = other.uINT16_;
      iNT32_ = other.iNT32_;
      uINT32_ = other.uINT32_;
      fLOAT32_ = other.fLOAT32_;
      fLOAT64_ = other.fLOAT64_;
      name_ = other.name_;
      offset_ = other.offset_;
      datatype_ = other.datatype_;
      count_ = other.count_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PointField Clone() {
      return new PointField(this);
    }

    /// <summary>Field number for the "INT8" field.</summary>
    public const int INT8FieldNumber = 1;
    private uint iNT8_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint INT8 {
      get { return iNT8_; }
      set {
        iNT8_ = value;
      }
    }

    /// <summary>Field number for the "UINT8" field.</summary>
    public const int UINT8FieldNumber = 2;
    private uint uINT8_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UINT8 {
      get { return uINT8_; }
      set {
        uINT8_ = value;
      }
    }

    /// <summary>Field number for the "INT16" field.</summary>
    public const int INT16FieldNumber = 3;
    private uint iNT16_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint INT16 {
      get { return iNT16_; }
      set {
        iNT16_ = value;
      }
    }

    /// <summary>Field number for the "UINT16" field.</summary>
    public const int UINT16FieldNumber = 4;
    private uint uINT16_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UINT16 {
      get { return uINT16_; }
      set {
        uINT16_ = value;
      }
    }

    /// <summary>Field number for the "INT32" field.</summary>
    public const int INT32FieldNumber = 5;
    private uint iNT32_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint INT32 {
      get { return iNT32_; }
      set {
        iNT32_ = value;
      }
    }

    /// <summary>Field number for the "UINT32" field.</summary>
    public const int UINT32FieldNumber = 6;
    private uint uINT32_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UINT32 {
      get { return uINT32_; }
      set {
        uINT32_ = value;
      }
    }

    /// <summary>Field number for the "FLOAT32" field.</summary>
    public const int FLOAT32FieldNumber = 7;
    private uint fLOAT32_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FLOAT32 {
      get { return fLOAT32_; }
      set {
        fLOAT32_ = value;
      }
    }

    /// <summary>Field number for the "FLOAT64" field.</summary>
    public const int FLOAT64FieldNumber = 8;
    private uint fLOAT64_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FLOAT64 {
      get { return fLOAT64_; }
      set {
        fLOAT64_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 9;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "offset" field.</summary>
    public const int OffsetFieldNumber = 10;
    private uint offset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Offset {
      get { return offset_; }
      set {
        offset_ = value;
      }
    }

    /// <summary>Field number for the "datatype" field.</summary>
    public const int DatatypeFieldNumber = 11;
    private uint datatype_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Datatype {
      get { return datatype_; }
      set {
        datatype_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 12;
    private uint count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PointField);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PointField other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (INT8 != other.INT8) return false;
      if (UINT8 != other.UINT8) return false;
      if (INT16 != other.INT16) return false;
      if (UINT16 != other.UINT16) return false;
      if (INT32 != other.INT32) return false;
      if (UINT32 != other.UINT32) return false;
      if (FLOAT32 != other.FLOAT32) return false;
      if (FLOAT64 != other.FLOAT64) return false;
      if (Name != other.Name) return false;
      if (Offset != other.Offset) return false;
      if (Datatype != other.Datatype) return false;
      if (Count != other.Count) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (INT8 != 0) hash ^= INT8.GetHashCode();
      if (UINT8 != 0) hash ^= UINT8.GetHashCode();
      if (INT16 != 0) hash ^= INT16.GetHashCode();
      if (UINT16 != 0) hash ^= UINT16.GetHashCode();
      if (INT32 != 0) hash ^= INT32.GetHashCode();
      if (UINT32 != 0) hash ^= UINT32.GetHashCode();
      if (FLOAT32 != 0) hash ^= FLOAT32.GetHashCode();
      if (FLOAT64 != 0) hash ^= FLOAT64.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Offset != 0) hash ^= Offset.GetHashCode();
      if (Datatype != 0) hash ^= Datatype.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (INT8 != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(INT8);
      }
      if (UINT8 != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(UINT8);
      }
      if (INT16 != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(INT16);
      }
      if (UINT16 != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(UINT16);
      }
      if (INT32 != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(INT32);
      }
      if (UINT32 != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(UINT32);
      }
      if (FLOAT32 != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(FLOAT32);
      }
      if (FLOAT64 != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(FLOAT64);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Name);
      }
      if (Offset != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(Offset);
      }
      if (Datatype != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(Datatype);
      }
      if (Count != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(Count);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (INT8 != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(INT8);
      }
      if (UINT8 != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(UINT8);
      }
      if (INT16 != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(INT16);
      }
      if (UINT16 != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(UINT16);
      }
      if (INT32 != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(INT32);
      }
      if (UINT32 != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(UINT32);
      }
      if (FLOAT32 != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(FLOAT32);
      }
      if (FLOAT64 != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(FLOAT64);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Name);
      }
      if (Offset != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(Offset);
      }
      if (Datatype != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(Datatype);
      }
      if (Count != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(Count);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (INT8 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(INT8);
      }
      if (UINT8 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UINT8);
      }
      if (INT16 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(INT16);
      }
      if (UINT16 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UINT16);
      }
      if (INT32 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(INT32);
      }
      if (UINT32 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UINT32);
      }
      if (FLOAT32 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FLOAT32);
      }
      if (FLOAT64 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FLOAT64);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Offset != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Offset);
      }
      if (Datatype != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Datatype);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PointField other) {
      if (other == null) {
        return;
      }
      if (other.INT8 != 0) {
        INT8 = other.INT8;
      }
      if (other.UINT8 != 0) {
        UINT8 = other.UINT8;
      }
      if (other.INT16 != 0) {
        INT16 = other.INT16;
      }
      if (other.UINT16 != 0) {
        UINT16 = other.UINT16;
      }
      if (other.INT32 != 0) {
        INT32 = other.INT32;
      }
      if (other.UINT32 != 0) {
        UINT32 = other.UINT32;
      }
      if (other.FLOAT32 != 0) {
        FLOAT32 = other.FLOAT32;
      }
      if (other.FLOAT64 != 0) {
        FLOAT64 = other.FLOAT64;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Offset != 0) {
        Offset = other.Offset;
      }
      if (other.Datatype != 0) {
        Datatype = other.Datatype;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            INT8 = input.ReadUInt32();
            break;
          }
          case 16: {
            UINT8 = input.ReadUInt32();
            break;
          }
          case 24: {
            INT16 = input.ReadUInt32();
            break;
          }
          case 32: {
            UINT16 = input.ReadUInt32();
            break;
          }
          case 40: {
            INT32 = input.ReadUInt32();
            break;
          }
          case 48: {
            UINT32 = input.ReadUInt32();
            break;
          }
          case 56: {
            FLOAT32 = input.ReadUInt32();
            break;
          }
          case 64: {
            FLOAT64 = input.ReadUInt32();
            break;
          }
          case 74: {
            Name = input.ReadString();
            break;
          }
          case 80: {
            Offset = input.ReadUInt32();
            break;
          }
          case 88: {
            Datatype = input.ReadUInt32();
            break;
          }
          case 96: {
            Count = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            INT8 = input.ReadUInt32();
            break;
          }
          case 16: {
            UINT8 = input.ReadUInt32();
            break;
          }
          case 24: {
            INT16 = input.ReadUInt32();
            break;
          }
          case 32: {
            UINT16 = input.ReadUInt32();
            break;
          }
          case 40: {
            INT32 = input.ReadUInt32();
            break;
          }
          case 48: {
            UINT32 = input.ReadUInt32();
            break;
          }
          case 56: {
            FLOAT32 = input.ReadUInt32();
            break;
          }
          case 64: {
            FLOAT64 = input.ReadUInt32();
            break;
          }
          case 74: {
            Name = input.ReadString();
            break;
          }
          case 80: {
            Offset = input.ReadUInt32();
            break;
          }
          case 88: {
            Datatype = input.ReadUInt32();
            break;
          }
          case 96: {
            Count = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class LidarStreamingRequest : pb::IMessage<LidarStreamingRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LidarStreamingRequest> _parser = new pb::MessageParser<LidarStreamingRequest>(() => new LidarStreamingRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LidarStreamingRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sensorstreaming.SensorStreamingReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LidarStreamingRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LidarStreamingRequest(LidarStreamingRequest other) : this() {
      timeInSeconds_ = other.timeInSeconds_;
      height_ = other.height_;
      width_ = other.width_;
      fields_ = other.fields_.Clone();
      isBigEndian_ = other.isBigEndian_;
      pointStep_ = other.pointStep_;
      rowStep_ = other.rowStep_;
      data_ = other.data_;
      isDense_ = other.isDense_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LidarStreamingRequest Clone() {
      return new LidarStreamingRequest(this);
    }

    /// <summary>Field number for the "timeInSeconds" field.</summary>
    public const int TimeInSecondsFieldNumber = 1;
    private double timeInSeconds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double TimeInSeconds {
      get { return timeInSeconds_; }
      set {
        timeInSeconds_ = value;
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 2;
    private uint height_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    /// <summary>Field number for the "width" field.</summary>
    public const int WidthFieldNumber = 3;
    private uint width_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    /// <summary>Field number for the "fields" field.</summary>
    public const int FieldsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Sensorstreaming.PointField> _repeated_fields_codec
        = pb::FieldCodec.ForMessage(34, global::Sensorstreaming.PointField.Parser);
    private readonly pbc::RepeatedField<global::Sensorstreaming.PointField> fields_ = new pbc::RepeatedField<global::Sensorstreaming.PointField>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Sensorstreaming.PointField> Fields {
      get { return fields_; }
    }

    /// <summary>Field number for the "isBigEndian" field.</summary>
    public const int IsBigEndianFieldNumber = 5;
    private bool isBigEndian_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsBigEndian {
      get { return isBigEndian_; }
      set {
        isBigEndian_ = value;
      }
    }

    /// <summary>Field number for the "point_step" field.</summary>
    public const int PointStepFieldNumber = 6;
    private uint pointStep_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PointStep {
      get { return pointStep_; }
      set {
        pointStep_ = value;
      }
    }

    /// <summary>Field number for the "row_step" field.</summary>
    public const int RowStepFieldNumber = 7;
    private uint rowStep_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RowStep {
      get { return rowStep_; }
      set {
        rowStep_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 8;
    private pb::ByteString data_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "is_dense" field.</summary>
    public const int IsDenseFieldNumber = 9;
    private bool isDense_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsDense {
      get { return isDense_; }
      set {
        isDense_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LidarStreamingRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LidarStreamingRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TimeInSeconds, other.TimeInSeconds)) return false;
      if (Height != other.Height) return false;
      if (Width != other.Width) return false;
      if(!fields_.Equals(other.fields_)) return false;
      if (IsBigEndian != other.IsBigEndian) return false;
      if (PointStep != other.PointStep) return false;
      if (RowStep != other.RowStep) return false;
      if (Data != other.Data) return false;
      if (IsDense != other.IsDense) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TimeInSeconds != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TimeInSeconds);
      if (Height != 0) hash ^= Height.GetHashCode();
      if (Width != 0) hash ^= Width.GetHashCode();
      hash ^= fields_.GetHashCode();
      if (IsBigEndian != false) hash ^= IsBigEndian.GetHashCode();
      if (PointStep != 0) hash ^= PointStep.GetHashCode();
      if (RowStep != 0) hash ^= RowStep.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (IsDense != false) hash ^= IsDense.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (TimeInSeconds != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(TimeInSeconds);
      }
      if (Height != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Height);
      }
      if (Width != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Width);
      }
      fields_.WriteTo(output, _repeated_fields_codec);
      if (IsBigEndian != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsBigEndian);
      }
      if (PointStep != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(PointStep);
      }
      if (RowStep != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(RowStep);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(66);
        output.WriteBytes(Data);
      }
      if (IsDense != false) {
        output.WriteRawTag(72);
        output.WriteBool(IsDense);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (TimeInSeconds != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(TimeInSeconds);
      }
      if (Height != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Height);
      }
      if (Width != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Width);
      }
      fields_.WriteTo(ref output, _repeated_fields_codec);
      if (IsBigEndian != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsBigEndian);
      }
      if (PointStep != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(PointStep);
      }
      if (RowStep != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(RowStep);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(66);
        output.WriteBytes(Data);
      }
      if (IsDense != false) {
        output.WriteRawTag(72);
        output.WriteBool(IsDense);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TimeInSeconds != 0D) {
        size += 1 + 8;
      }
      if (Height != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Height);
      }
      if (Width != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Width);
      }
      size += fields_.CalculateSize(_repeated_fields_codec);
      if (IsBigEndian != false) {
        size += 1 + 1;
      }
      if (PointStep != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PointStep);
      }
      if (RowStep != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RowStep);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      if (IsDense != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LidarStreamingRequest other) {
      if (other == null) {
        return;
      }
      if (other.TimeInSeconds != 0D) {
        TimeInSeconds = other.TimeInSeconds;
      }
      if (other.Height != 0) {
        Height = other.Height;
      }
      if (other.Width != 0) {
        Width = other.Width;
      }
      fields_.Add(other.fields_);
      if (other.IsBigEndian != false) {
        IsBigEndian = other.IsBigEndian;
      }
      if (other.PointStep != 0) {
        PointStep = other.PointStep;
      }
      if (other.RowStep != 0) {
        RowStep = other.RowStep;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      if (other.IsDense != false) {
        IsDense = other.IsDense;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            TimeInSeconds = input.ReadDouble();
            break;
          }
          case 16: {
            Height = input.ReadUInt32();
            break;
          }
          case 24: {
            Width = input.ReadUInt32();
            break;
          }
          case 34: {
            fields_.AddEntriesFrom(input, _repeated_fields_codec);
            break;
          }
          case 40: {
            IsBigEndian = input.ReadBool();
            break;
          }
          case 48: {
            PointStep = input.ReadUInt32();
            break;
          }
          case 56: {
            RowStep = input.ReadUInt32();
            break;
          }
          case 66: {
            Data = input.ReadBytes();
            break;
          }
          case 72: {
            IsDense = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 9: {
            TimeInSeconds = input.ReadDouble();
            break;
          }
          case 16: {
            Height = input.ReadUInt32();
            break;
          }
          case 24: {
            Width = input.ReadUInt32();
            break;
          }
          case 34: {
            fields_.AddEntriesFrom(ref input, _repeated_fields_codec);
            break;
          }
          case 40: {
            IsBigEndian = input.ReadBool();
            break;
          }
          case 48: {
            PointStep = input.ReadUInt32();
            break;
          }
          case 56: {
            RowStep = input.ReadUInt32();
            break;
          }
          case 66: {
            Data = input.ReadBytes();
            break;
          }
          case 72: {
            IsDense = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class RadarStreamingRequest : pb::IMessage<RadarStreamingRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RadarStreamingRequest> _parser = new pb::MessageParser<RadarStreamingRequest>(() => new RadarStreamingRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RadarStreamingRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sensorstreaming.SensorStreamingReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RadarStreamingRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RadarStreamingRequest(RadarStreamingRequest other) : this() {
      rangeIncrement_ = other.rangeIncrement_;
      rangeStart_ = other.rangeStart_;
      numSamples_ = other.numSamples_;
      numSpokes_ = other.numSpokes_;
      minIntensity_ = other.minIntensity_;
      maxIntensity_ = other.maxIntensity_;
      timeInSeconds_ = other.timeInSeconds_.Clone();
      azimuth_ = other.azimuth_.Clone();
      radarSpokes_ = other.radarSpokes_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RadarStreamingRequest Clone() {
      return new RadarStreamingRequest(this);
    }

    /// <summary>Field number for the "rangeIncrement" field.</summary>
    public const int RangeIncrementFieldNumber = 1;
    private float rangeIncrement_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RangeIncrement {
      get { return rangeIncrement_; }
      set {
        rangeIncrement_ = value;
      }
    }

    /// <summary>Field number for the "rangeStart" field.</summary>
    public const int RangeStartFieldNumber = 2;
    private float rangeStart_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RangeStart {
      get { return rangeStart_; }
      set {
        rangeStart_ = value;
      }
    }

    /// <summary>Field number for the "numSamples" field.</summary>
    public const int NumSamplesFieldNumber = 3;
    private uint numSamples_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NumSamples {
      get { return numSamples_; }
      set {
        numSamples_ = value;
      }
    }

    /// <summary>Field number for the "numSpokes" field.</summary>
    public const int NumSpokesFieldNumber = 4;
    private uint numSpokes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NumSpokes {
      get { return numSpokes_; }
      set {
        numSpokes_ = value;
      }
    }

    /// <summary>Field number for the "minIntensity" field.</summary>
    public const int MinIntensityFieldNumber = 5;
    private uint minIntensity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MinIntensity {
      get { return minIntensity_; }
      set {
        minIntensity_ = value;
      }
    }

    /// <summary>Field number for the "maxIntensity" field.</summary>
    public const int MaxIntensityFieldNumber = 6;
    private uint maxIntensity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxIntensity {
      get { return maxIntensity_; }
      set {
        maxIntensity_ = value;
      }
    }

    /// <summary>Field number for the "timeInSeconds" field.</summary>
    public const int TimeInSecondsFieldNumber = 7;
    private static readonly pb::FieldCodec<double> _repeated_timeInSeconds_codec
        = pb::FieldCodec.ForDouble(58);
    private readonly pbc::RepeatedField<double> timeInSeconds_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> TimeInSeconds {
      get { return timeInSeconds_; }
    }

    /// <summary>Field number for the "azimuth" field.</summary>
    public const int AzimuthFieldNumber = 8;
    private static readonly pb::FieldCodec<float> _repeated_azimuth_codec
        = pb::FieldCodec.ForFloat(66);
    private readonly pbc::RepeatedField<float> azimuth_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> Azimuth {
      get { return azimuth_; }
    }

    /// <summary>Field number for the "radarSpokes" field.</summary>
    public const int RadarSpokesFieldNumber = 9;
    private pb::ByteString radarSpokes_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RadarSpokes {
      get { return radarSpokes_; }
      set {
        radarSpokes_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RadarStreamingRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RadarStreamingRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RangeIncrement, other.RangeIncrement)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RangeStart, other.RangeStart)) return false;
      if (NumSamples != other.NumSamples) return false;
      if (NumSpokes != other.NumSpokes) return false;
      if (MinIntensity != other.MinIntensity) return false;
      if (MaxIntensity != other.MaxIntensity) return false;
      if(!timeInSeconds_.Equals(other.timeInSeconds_)) return false;
      if(!azimuth_.Equals(other.azimuth_)) return false;
      if (RadarSpokes != other.RadarSpokes) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RangeIncrement != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RangeIncrement);
      if (RangeStart != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RangeStart);
      if (NumSamples != 0) hash ^= NumSamples.GetHashCode();
      if (NumSpokes != 0) hash ^= NumSpokes.GetHashCode();
      if (MinIntensity != 0) hash ^= MinIntensity.GetHashCode();
      if (MaxIntensity != 0) hash ^= MaxIntensity.GetHashCode();
      hash ^= timeInSeconds_.GetHashCode();
      hash ^= azimuth_.GetHashCode();
      if (RadarSpokes.Length != 0) hash ^= RadarSpokes.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (RangeIncrement != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(RangeIncrement);
      }
      if (RangeStart != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(RangeStart);
      }
      if (NumSamples != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(NumSamples);
      }
      if (NumSpokes != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(NumSpokes);
      }
      if (MinIntensity != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(MinIntensity);
      }
      if (MaxIntensity != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(MaxIntensity);
      }
      timeInSeconds_.WriteTo(output, _repeated_timeInSeconds_codec);
      azimuth_.WriteTo(output, _repeated_azimuth_codec);
      if (RadarSpokes.Length != 0) {
        output.WriteRawTag(74);
        output.WriteBytes(RadarSpokes);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (RangeIncrement != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(RangeIncrement);
      }
      if (RangeStart != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(RangeStart);
      }
      if (NumSamples != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(NumSamples);
      }
      if (NumSpokes != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(NumSpokes);
      }
      if (MinIntensity != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(MinIntensity);
      }
      if (MaxIntensity != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(MaxIntensity);
      }
      timeInSeconds_.WriteTo(ref output, _repeated_timeInSeconds_codec);
      azimuth_.WriteTo(ref output, _repeated_azimuth_codec);
      if (RadarSpokes.Length != 0) {
        output.WriteRawTag(74);
        output.WriteBytes(RadarSpokes);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RangeIncrement != 0F) {
        size += 1 + 4;
      }
      if (RangeStart != 0F) {
        size += 1 + 4;
      }
      if (NumSamples != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumSamples);
      }
      if (NumSpokes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumSpokes);
      }
      if (MinIntensity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MinIntensity);
      }
      if (MaxIntensity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxIntensity);
      }
      size += timeInSeconds_.CalculateSize(_repeated_timeInSeconds_codec);
      size += azimuth_.CalculateSize(_repeated_azimuth_codec);
      if (RadarSpokes.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RadarSpokes);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RadarStreamingRequest other) {
      if (other == null) {
        return;
      }
      if (other.RangeIncrement != 0F) {
        RangeIncrement = other.RangeIncrement;
      }
      if (other.RangeStart != 0F) {
        RangeStart = other.RangeStart;
      }
      if (other.NumSamples != 0) {
        NumSamples = other.NumSamples;
      }
      if (other.NumSpokes != 0) {
        NumSpokes = other.NumSpokes;
      }
      if (other.MinIntensity != 0) {
        MinIntensity = other.MinIntensity;
      }
      if (other.MaxIntensity != 0) {
        MaxIntensity = other.MaxIntensity;
      }
      timeInSeconds_.Add(other.timeInSeconds_);
      azimuth_.Add(other.azimuth_);
      if (other.RadarSpokes.Length != 0) {
        RadarSpokes = other.RadarSpokes;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            RangeIncrement = input.ReadFloat();
            break;
          }
          case 21: {
            RangeStart = input.ReadFloat();
            break;
          }
          case 24: {
            NumSamples = input.ReadUInt32();
            break;
          }
          case 32: {
            NumSpokes = input.ReadUInt32();
            break;
          }
          case 40: {
            MinIntensity = input.ReadUInt32();
            break;
          }
          case 48: {
            MaxIntensity = input.ReadUInt32();
            break;
          }
          case 58:
          case 57: {
            timeInSeconds_.AddEntriesFrom(input, _repeated_timeInSeconds_codec);
            break;
          }
          case 66:
          case 69: {
            azimuth_.AddEntriesFrom(input, _repeated_azimuth_codec);
            break;
          }
          case 74: {
            RadarSpokes = input.ReadBytes();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 13: {
            RangeIncrement = input.ReadFloat();
            break;
          }
          case 21: {
            RangeStart = input.ReadFloat();
            break;
          }
          case 24: {
            NumSamples = input.ReadUInt32();
            break;
          }
          case 32: {
            NumSpokes = input.ReadUInt32();
            break;
          }
          case 40: {
            MinIntensity = input.ReadUInt32();
            break;
          }
          case 48: {
            MaxIntensity = input.ReadUInt32();
            break;
          }
          case 58:
          case 57: {
            timeInSeconds_.AddEntriesFrom(ref input, _repeated_timeInSeconds_codec);
            break;
          }
          case 66:
          case 69: {
            azimuth_.AddEntriesFrom(ref input, _repeated_azimuth_codec);
            break;
          }
          case 74: {
            RadarSpokes = input.ReadBytes();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class DepthStreamingRequest : pb::IMessage<DepthStreamingRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DepthStreamingRequest> _parser = new pb::MessageParser<DepthStreamingRequest>(() => new DepthStreamingRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DepthStreamingRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sensorstreaming.SensorStreamingReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DepthStreamingRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DepthStreamingRequest(DepthStreamingRequest other) : this() {
      depth_ = other.depth_;
      sensorId_ = other.sensorId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DepthStreamingRequest Clone() {
      return new DepthStreamingRequest(this);
    }

    /// <summary>Field number for the "depth" field.</summary>
    public const int DepthFieldNumber = 1;
    private float depth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Depth {
      get { return depth_; }
      set {
        depth_ = value;
      }
    }

    /// <summary>Field number for the "sensorId" field.</summary>
    public const int SensorIdFieldNumber = 2;
    private string sensorId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SensorId {
      get { return sensorId_; }
      set {
        sensorId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DepthStreamingRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DepthStreamingRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Depth, other.Depth)) return false;
      if (SensorId != other.SensorId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Depth != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Depth);
      if (SensorId.Length != 0) hash ^= SensorId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Depth != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Depth);
      }
      if (SensorId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SensorId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Depth != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Depth);
      }
      if (SensorId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SensorId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Depth != 0F) {
        size += 1 + 4;
      }
      if (SensorId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SensorId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DepthStreamingRequest other) {
      if (other == null) {
        return;
      }
      if (other.Depth != 0F) {
        Depth = other.Depth;
      }
      if (other.SensorId.Length != 0) {
        SensorId = other.SensorId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Depth = input.ReadFloat();
            break;
          }
          case 18: {
            SensorId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 13: {
            Depth = input.ReadFloat();
            break;
          }
          case 18: {
            SensorId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class DvlStreamingRequest : pb::IMessage<DvlStreamingRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DvlStreamingRequest> _parser = new pb::MessageParser<DvlStreamingRequest>(() => new DvlStreamingRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DvlStreamingRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sensorstreaming.SensorStreamingReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DvlStreamingRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DvlStreamingRequest(DvlStreamingRequest other) : this() {
      altitude_ = other.altitude_;
      groundVelocity_ = other.groundVelocity_ != null ? other.groundVelocity_.Clone() : null;
      beamRanges_ = other.beamRanges_.Clone();
      sensorId_ = other.sensorId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DvlStreamingRequest Clone() {
      return new DvlStreamingRequest(this);
    }

    /// <summary>Field number for the "altitude" field.</summary>
    public const int AltitudeFieldNumber = 1;
    private float altitude_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Altitude {
      get { return altitude_; }
      set {
        altitude_ = value;
      }
    }

    /// <summary>Field number for the "groundVelocity" field.</summary>
    public const int GroundVelocityFieldNumber = 2;
    private global::Common.Vec3 groundVelocity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Common.Vec3 GroundVelocity {
      get { return groundVelocity_; }
      set {
        groundVelocity_ = value;
      }
    }

    /// <summary>Field number for the "beamRanges" field.</summary>
    public const int BeamRangesFieldNumber = 3;
    private static readonly pb::FieldCodec<float> _repeated_beamRanges_codec
        = pb::FieldCodec.ForFloat(26);
    private readonly pbc::RepeatedField<float> beamRanges_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> BeamRanges {
      get { return beamRanges_; }
    }

    /// <summary>Field number for the "sensorId" field.</summary>
    public const int SensorIdFieldNumber = 4;
    private string sensorId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SensorId {
      get { return sensorId_; }
      set {
        sensorId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DvlStreamingRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DvlStreamingRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Altitude, other.Altitude)) return false;
      if (!object.Equals(GroundVelocity, other.GroundVelocity)) return false;
      if(!beamRanges_.Equals(other.beamRanges_)) return false;
      if (SensorId != other.SensorId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Altitude != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Altitude);
      if (groundVelocity_ != null) hash ^= GroundVelocity.GetHashCode();
      hash ^= beamRanges_.GetHashCode();
      if (SensorId.Length != 0) hash ^= SensorId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Altitude != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Altitude);
      }
      if (groundVelocity_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(GroundVelocity);
      }
      beamRanges_.WriteTo(output, _repeated_beamRanges_codec);
      if (SensorId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(SensorId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Altitude != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Altitude);
      }
      if (groundVelocity_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(GroundVelocity);
      }
      beamRanges_.WriteTo(ref output, _repeated_beamRanges_codec);
      if (SensorId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(SensorId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Altitude != 0F) {
        size += 1 + 4;
      }
      if (groundVelocity_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GroundVelocity);
      }
      size += beamRanges_.CalculateSize(_repeated_beamRanges_codec);
      if (SensorId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SensorId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DvlStreamingRequest other) {
      if (other == null) {
        return;
      }
      if (other.Altitude != 0F) {
        Altitude = other.Altitude;
      }
      if (other.groundVelocity_ != null) {
        if (groundVelocity_ == null) {
          GroundVelocity = new global::Common.Vec3();
        }
        GroundVelocity.MergeFrom(other.GroundVelocity);
      }
      beamRanges_.Add(other.beamRanges_);
      if (other.SensorId.Length != 0) {
        SensorId = other.SensorId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Altitude = input.ReadFloat();
            break;
          }
          case 18: {
            if (groundVelocity_ == null) {
              GroundVelocity = new global::Common.Vec3();
            }
            input.ReadMessage(GroundVelocity);
            break;
          }
          case 26:
          case 29: {
            beamRanges_.AddEntriesFrom(input, _repeated_beamRanges_codec);
            break;
          }
          case 34: {
            SensorId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 13: {
            Altitude = input.ReadFloat();
            break;
          }
          case 18: {
            if (groundVelocity_ == null) {
              GroundVelocity = new global::Common.Vec3();
            }
            input.ReadMessage(GroundVelocity);
            break;
          }
          case 26:
          case 29: {
            beamRanges_.AddEntriesFrom(ref input, _repeated_beamRanges_codec);
            break;
          }
          case 34: {
            SensorId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class GnssStreamingRequest : pb::IMessage<GnssStreamingRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GnssStreamingRequest> _parser = new pb::MessageParser<GnssStreamingRequest>(() => new GnssStreamingRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GnssStreamingRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sensorstreaming.SensorStreamingReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GnssStreamingRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GnssStreamingRequest(GnssStreamingRequest other) : this() {
      point_ = other.point_ != null ? other.point_.Clone() : null;
      sensorId_ = other.sensorId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GnssStreamingRequest Clone() {
      return new GnssStreamingRequest(this);
    }

    /// <summary>Field number for the "point" field.</summary>
    public const int PointFieldNumber = 1;
    private global::Common.GeoPoint point_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Common.GeoPoint Point {
      get { return point_; }
      set {
        point_ = value;
      }
    }

    /// <summary>Field number for the "sensorId" field.</summary>
    public const int SensorIdFieldNumber = 2;
    private string sensorId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SensorId {
      get { return sensorId_; }
      set {
        sensorId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GnssStreamingRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GnssStreamingRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Point, other.Point)) return false;
      if (SensorId != other.SensorId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (point_ != null) hash ^= Point.GetHashCode();
      if (SensorId.Length != 0) hash ^= SensorId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (point_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Point);
      }
      if (SensorId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SensorId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (point_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Point);
      }
      if (SensorId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SensorId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (point_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Point);
      }
      if (SensorId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SensorId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GnssStreamingRequest other) {
      if (other == null) {
        return;
      }
      if (other.point_ != null) {
        if (point_ == null) {
          Point = new global::Common.GeoPoint();
        }
        Point.MergeFrom(other.Point);
      }
      if (other.SensorId.Length != 0) {
        SensorId = other.SensorId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (point_ == null) {
              Point = new global::Common.GeoPoint();
            }
            input.ReadMessage(Point);
            break;
          }
          case 18: {
            SensorId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (point_ == null) {
              Point = new global::Common.GeoPoint();
            }
            input.ReadMessage(Point);
            break;
          }
          case 18: {
            SensorId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ImuStreamingRequest : pb::IMessage<ImuStreamingRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ImuStreamingRequest> _parser = new pb::MessageParser<ImuStreamingRequest>(() => new ImuStreamingRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ImuStreamingRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sensorstreaming.SensorStreamingReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImuStreamingRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImuStreamingRequest(ImuStreamingRequest other) : this() {
      acceleration_ = other.acceleration_ != null ? other.acceleration_.Clone() : null;
      angularVelocity_ = other.angularVelocity_ != null ? other.angularVelocity_.Clone() : null;
      orientation_ = other.orientation_ != null ? other.orientation_.Clone() : null;
      sensorId_ = other.sensorId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImuStreamingRequest Clone() {
      return new ImuStreamingRequest(this);
    }

    /// <summary>Field number for the "acceleration" field.</summary>
    public const int AccelerationFieldNumber = 1;
    private global::Common.Acceleration acceleration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Common.Acceleration Acceleration {
      get { return acceleration_; }
      set {
        acceleration_ = value;
      }
    }

    /// <summary>Field number for the "angularVelocity" field.</summary>
    public const int AngularVelocityFieldNumber = 2;
    private global::Common.AngularVelocity angularVelocity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Common.AngularVelocity AngularVelocity {
      get { return angularVelocity_; }
      set {
        angularVelocity_ = value;
      }
    }

    /// <summary>Field number for the "orientation" field.</summary>
    public const int OrientationFieldNumber = 3;
    private global::Common.Orientation orientation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Common.Orientation Orientation {
      get { return orientation_; }
      set {
        orientation_ = value;
      }
    }

    /// <summary>Field number for the "sensorId" field.</summary>
    public const int SensorIdFieldNumber = 4;
    private string sensorId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SensorId {
      get { return sensorId_; }
      set {
        sensorId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ImuStreamingRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ImuStreamingRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Acceleration, other.Acceleration)) return false;
      if (!object.Equals(AngularVelocity, other.AngularVelocity)) return false;
      if (!object.Equals(Orientation, other.Orientation)) return false;
      if (SensorId != other.SensorId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (acceleration_ != null) hash ^= Acceleration.GetHashCode();
      if (angularVelocity_ != null) hash ^= AngularVelocity.GetHashCode();
      if (orientation_ != null) hash ^= Orientation.GetHashCode();
      if (SensorId.Length != 0) hash ^= SensorId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (acceleration_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Acceleration);
      }
      if (angularVelocity_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(AngularVelocity);
      }
      if (orientation_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Orientation);
      }
      if (SensorId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(SensorId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (acceleration_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Acceleration);
      }
      if (angularVelocity_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(AngularVelocity);
      }
      if (orientation_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Orientation);
      }
      if (SensorId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(SensorId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (acceleration_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Acceleration);
      }
      if (angularVelocity_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AngularVelocity);
      }
      if (orientation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Orientation);
      }
      if (SensorId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SensorId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ImuStreamingRequest other) {
      if (other == null) {
        return;
      }
      if (other.acceleration_ != null) {
        if (acceleration_ == null) {
          Acceleration = new global::Common.Acceleration();
        }
        Acceleration.MergeFrom(other.Acceleration);
      }
      if (other.angularVelocity_ != null) {
        if (angularVelocity_ == null) {
          AngularVelocity = new global::Common.AngularVelocity();
        }
        AngularVelocity.MergeFrom(other.AngularVelocity);
      }
      if (other.orientation_ != null) {
        if (orientation_ == null) {
          Orientation = new global::Common.Orientation();
        }
        Orientation.MergeFrom(other.Orientation);
      }
      if (other.SensorId.Length != 0) {
        SensorId = other.SensorId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (acceleration_ == null) {
              Acceleration = new global::Common.Acceleration();
            }
            input.ReadMessage(Acceleration);
            break;
          }
          case 18: {
            if (angularVelocity_ == null) {
              AngularVelocity = new global::Common.AngularVelocity();
            }
            input.ReadMessage(AngularVelocity);
            break;
          }
          case 26: {
            if (orientation_ == null) {
              Orientation = new global::Common.Orientation();
            }
            input.ReadMessage(Orientation);
            break;
          }
          case 34: {
            SensorId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (acceleration_ == null) {
              Acceleration = new global::Common.Acceleration();
            }
            input.ReadMessage(Acceleration);
            break;
          }
          case 18: {
            if (angularVelocity_ == null) {
              AngularVelocity = new global::Common.AngularVelocity();
            }
            input.ReadMessage(AngularVelocity);
            break;
          }
          case 26: {
            if (orientation_ == null) {
              Orientation = new global::Common.Orientation();
            }
            input.ReadMessage(Orientation);
            break;
          }
          case 34: {
            SensorId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class PoseStreamingRequest : pb::IMessage<PoseStreamingRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PoseStreamingRequest> _parser = new pb::MessageParser<PoseStreamingRequest>(() => new PoseStreamingRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PoseStreamingRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sensorstreaming.SensorStreamingReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PoseStreamingRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PoseStreamingRequest(PoseStreamingRequest other) : this() {
      pose_ = other.pose_ != null ? other.pose_.Clone() : null;
      sensorId_ = other.sensorId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PoseStreamingRequest Clone() {
      return new PoseStreamingRequest(this);
    }

    /// <summary>Field number for the "pose" field.</summary>
    public const int PoseFieldNumber = 1;
    private global::Common.Pose pose_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Common.Pose Pose {
      get { return pose_; }
      set {
        pose_ = value;
      }
    }

    /// <summary>Field number for the "sensorId" field.</summary>
    public const int SensorIdFieldNumber = 2;
    private string sensorId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SensorId {
      get { return sensorId_; }
      set {
        sensorId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PoseStreamingRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PoseStreamingRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Pose, other.Pose)) return false;
      if (SensorId != other.SensorId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (pose_ != null) hash ^= Pose.GetHashCode();
      if (SensorId.Length != 0) hash ^= SensorId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (pose_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Pose);
      }
      if (SensorId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SensorId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (pose_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Pose);
      }
      if (SensorId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SensorId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (pose_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pose);
      }
      if (SensorId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SensorId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PoseStreamingRequest other) {
      if (other == null) {
        return;
      }
      if (other.pose_ != null) {
        if (pose_ == null) {
          Pose = new global::Common.Pose();
        }
        Pose.MergeFrom(other.Pose);
      }
      if (other.SensorId.Length != 0) {
        SensorId = other.SensorId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (pose_ == null) {
              Pose = new global::Common.Pose();
            }
            input.ReadMessage(Pose);
            break;
          }
          case 18: {
            SensorId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (pose_ == null) {
              Pose = new global::Common.Pose();
            }
            input.ReadMessage(Pose);
            break;
          }
          case 18: {
            SensorId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SonarStreamingRequest : pb::IMessage<SonarStreamingRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SonarStreamingRequest> _parser = new pb::MessageParser<SonarStreamingRequest>(() => new SonarStreamingRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SonarStreamingRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sensorstreaming.SensorStreamingReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SonarStreamingRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SonarStreamingRequest(SonarStreamingRequest other) : this() {
      range_ = other.range_;
      bearing_ = other.bearing_;
      sensorId_ = other.sensorId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SonarStreamingRequest Clone() {
      return new SonarStreamingRequest(this);
    }

    /// <summary>Field number for the "range" field.</summary>
    public const int RangeFieldNumber = 1;
    private float range_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Range {
      get { return range_; }
      set {
        range_ = value;
      }
    }

    /// <summary>Field number for the "bearing" field.</summary>
    public const int BearingFieldNumber = 2;
    private float bearing_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Bearing {
      get { return bearing_; }
      set {
        bearing_ = value;
      }
    }

    /// <summary>Field number for the "sensorId" field.</summary>
    public const int SensorIdFieldNumber = 3;
    private string sensorId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SensorId {
      get { return sensorId_; }
      set {
        sensorId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SonarStreamingRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SonarStreamingRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Range, other.Range)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Bearing, other.Bearing)) return false;
      if (SensorId != other.SensorId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Range != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Range);
      if (Bearing != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Bearing);
      if (SensorId.Length != 0) hash ^= SensorId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Range != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Range);
      }
      if (Bearing != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Bearing);
      }
      if (SensorId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(SensorId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Range != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Range);
      }
      if (Bearing != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Bearing);
      }
      if (SensorId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(SensorId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Range != 0F) {
        size += 1 + 4;
      }
      if (Bearing != 0F) {
        size += 1 + 4;
      }
      if (SensorId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SensorId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SonarStreamingRequest other) {
      if (other == null) {
        return;
      }
      if (other.Range != 0F) {
        Range = other.Range;
      }
      if (other.Bearing != 0F) {
        Bearing = other.Bearing;
      }
      if (other.SensorId.Length != 0) {
        SensorId = other.SensorId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Range = input.ReadFloat();
            break;
          }
          case 21: {
            Bearing = input.ReadFloat();
            break;
          }
          case 26: {
            SensorId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 13: {
            Range = input.ReadFloat();
            break;
          }
          case 21: {
            Bearing = input.ReadFloat();
            break;
          }
          case 26: {
            SensorId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
